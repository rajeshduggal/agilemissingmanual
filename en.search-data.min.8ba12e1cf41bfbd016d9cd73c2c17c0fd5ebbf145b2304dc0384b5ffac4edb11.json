[{"id":0,"href":"/introduction/audience/","title":"Who Is This Manual For?","section":"Introduction","content":" Is this manual for me? # I\u0026rsquo;ve never heard of \u0026ldquo;Agile\u0026rdquo; # This is not for you. But if you really want to know. It\u0026rsquo;s a software development approach that emerged from a discussion session at a software development conference in 2001. It\u0026rsquo;s based on the idea of setting things up to embrace the envitable change that happens during almost all software development projects.\nI don\u0026rsquo;t know what \u0026ldquo;agile\u0026rdquo; is, but someone told me we do it here. # This is probably not for you. But you can pass this website url along to the agile team. They might find it interesting.\nAnd if you really want to know what this manual is about\u0026hellip;\nThere isn\u0026rsquo;t a step by step clear guide on how to do agile. And so many software development teams approach it differently. Which is just fine.\nAgile development is an approach to incrementally and interatively evolve the software being developed by rapidly getting the newly developed software features working and available for the users to use, so we can get feedback and use it to steer and drive the software development direction forward.\nMany teams involved in this software development approach are missing some key understandings of what it means to run a software development project with agility in mind. And that\u0026rsquo;s the information that this manual is offering.\nI\u0026rsquo;ve heard of agile and I\u0026rsquo;ve started learning about it # Yes, this is for you!, Welcome!\nUnfortunately, You\u0026rsquo;ll find a lot of contradictory information online about what agile is at a high level. There\u0026rsquo;s a lot of mis-conceptions and mis-understanding of what it is, and what it\u0026rsquo;s about. Many teams use a lot of the terminology and do the different ceremonies (stand-up meetings, release planning, etc) But they don\u0026rsquo;t understand the importance of how these practices and ceremonies feed into the values.\nI\u0026rsquo;m involved with a team that is doing \u0026ldquo;agile\u0026rdquo;. # Yes, this is for you!, Welcome!\nIt\u0026rsquo;s important to say that although there\u0026rsquo;s a lot of information in this manual. It\u0026rsquo;s not all compulsary to follow. There is no one-size-fits-all cookie cutter approach. But! there are some high level concepts and ideas that we are striving for when deciding what practices, techniques, and processes to put in place.\nHopefully the information in this manual will convey those high level concepts so that teams can model or directly use the techniques and practices described in this manual.\nI\u0026rsquo;m in an agile team and loving it! # Fantastic! You\u0026rsquo;ve very lucky! Perhaps your team has a good understanding of how agile is used to create balance and harmony between the stakeholders and development teams, so that that they co-operate together with a shared unified goal of project success. And you\u0026rsquo;re all working together to capture the most ROI and allowing each other the space they need to make the project a enjoyable positive experience.\nI\u0026rsquo;m in an agile team and hating it! # Oh no! Unfortunately, this isn\u0026rsquo;t a rare thing. When you read articles online. You\u0026rsquo;ll often find two different types of articles. Those that talk about how agile is about collaboration and positivity amongst the team.\nOr you\u0026rsquo;ll read articles that are skeptical and talk about how agile isn\u0026rsquo;t really the silver bullet that it\u0026rsquo;s described as. And in some articles they\u0026rsquo;ll talk about how agile is anti-pattern, or snake oil.\nI hope that when you look through this manual, you\u0026rsquo;ll be able to identify where in your team things aren\u0026rsquo;t properly following the high level concepts of agile development, and you\u0026rsquo;ll find the source of frustration in your team. And be able to offer a different approach to your team that will ease some of the pressure and frustration.\nFeel free to reach out to me if you\u0026rsquo;d like to discuss the problems you\u0026rsquo;re feeling in your team. And perhaps I can give you some suggestions for you consider bringing to your team.\nI\u0026rsquo;m running an agile team and things are going pretty well # Super! Well done! Please reach out to me and tell me what you feel some of the key reasons are of why/how you were able to get buy in and success in your team.\nPerhaps there\u0026rsquo;s some additional information you can give me that your gleaned from your experience running an agile development project. And I can add some of those golden nuggets into this manual!\nI\u0026rsquo;m running an agile team and it\u0026rsquo;s a struggle # I hear you. It\u0026rsquo;s not easy to get the team onboard with agile. I usually find that some people on the team have worked in other agile development projects and have many notions of how it\u0026rsquo;s supposed to go. And have been practicing some techniques that might seem sensible, but aren\u0026rsquo;t aligned with the effective nature of agile, and instead are more rigid and efficient. And really there needs to a balance between the two (But probably siding more on the \u0026ldquo;efficieny\u0026rdquo; side of things.)\nsometimes there\u0026rsquo;s just one or two things that need adjusting to turn things around and make the experience more enjoyable for everyone. And that will reduce some of the pressure and frustration.\nIt\u0026rsquo;s funny how often I hear people in teams complaining because someone changed their mind on a requirement. Or because the developers are having difficulty changing the existing application code. Not understanding that \u0026ldquo;change\u0026rdquo; is a core fundamental aspect of the agile development approach!\nI\u0026rsquo;m running an agile team and it\u0026rsquo;s not working # Oh no! Sorry to hear that. Take a look at this manual, and see if you can identify some aspects of how agile development is being done in your team, and perhaps needs to be done differently.\nAlso please reach out to me, and we can discuss what problems the team is facing, and perhaps I can offere some suggestions to fix it.\nI\u0026rsquo;ve just passed an agile/certification exam # Congratulations! Well done, that\u0026rsquo;s exciting!\nI\u0026rsquo;m sure the learning you recieved during your training for the exam will be of great use for your projects and teams!\nHopefully, the information on this site aligns with the things you learned during your studies. If there\u0026rsquo;s anything that\u0026rsquo;s not aligned. Please reach out to me and let me know about it. I\u0026rsquo;m really curious to know which concepts they\u0026rsquo;re teaching are different to what\u0026rsquo;s described on this site.\n"},{"id":1,"href":"/introduction/author/","title":"Who Wrote This?","section":"Introduction","content":" Who is Raj Duggal? # So, you\u0026rsquo;re curious to know who wrote this, and why? I\u0026rsquo;ll tell you\u0026hellip;\nIt\u0026rsquo;s been a long long journey for me. 28 years as an I.T professional.\nI began my software development career here in Toronto, back in the mid 90s.\nBack in the 90s, it was typical for software projects to be based on a gating system. Where the project went through distinct scheduled phases.\nFirst was the design phase, then development, then testing, until it was eventually deployed into production.\nBut!, only after the stakeholders agreed that everything looked good, and they signed off that all the work was complete, and they wouldn\u0026rsquo;t be asked for more changes.\nBetween each of the phases there was a \u0026ldquo;gate\u0026rdquo; where the stakeholders needed to sign-off to formally agree that they felt the project was ready to move to the next phase.\nIt was pretty common for the stakeholders to delay and resist signing off for as long as the project schedule would allow, until they felt very very confident that all the needed work in the phase was \u0026ldquo;done\u0026rdquo;. Because they didn\u0026rsquo;t want any one complaining if they wanted to go back and change something.\nAnd, in the situations where a stakeholder decided that some new change would be needed, there was a \u0026ldquo;change control\u0026rdquo; process, to formalize the \u0026ldquo;change request\u0026rdquo; process.\nFor most projects, it was generally considered a bad thing if changes happened mid-way through the project.\nThe thing is\u0026hellip; change always always happened. It was inevitable!\nIn pretty much every software project I\u0026rsquo;ve been involved in. And so most projects had this internal built in pressure, conflict, and negotiation that no one liked, but everyone knew they would need to deal with at some point during the project.\nThe Manifesto for Agile Software Development provided a launching board to encourage conversations to re-assess the way we\u0026rsquo;ve been developming software from a first-principles approach.\nSince change is inevitable. How can we develop and deliver software in way that embraces the idea of \u0026ldquo;change\u0026rdquo; into the development process. Rather than trying to fight it.\nOver the years, I\u0026rsquo;ve worked on many many client engagements, and I\u0026rsquo;ve seen the popularity of \u0026ldquo;agile\u0026rdquo; grow. Yet! It seems, unfortunately, that in most cases, the underlying ideas are being missed at a foundational level. And it seems that many of the participants of agile projects, are using the buzz words, but not understanding why these practices exist. And how they feed into project success.\n"}]