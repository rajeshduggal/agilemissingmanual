[{"id":0,"href":"/introduction/author/","title":"Who Wrote This?","section":"Introduction","content":" Who is Raj Duggal? # So, you’re curious to know who’s behind this website and why? Let me tell you…\nIt’s been quite the journey—over 25 years in I.T.\nMy software development career started here in Toronto in the mid-90s, a time when tech was very different from today. Back then, software projects followed a strict, step-by-step approach known as the \u0026ldquo;gating\u0026rdquo; system. Projects moved through clearly defined phases: design, development, testing, and finally, deployment. But there was a catch: each phase needed a formal sign-off before moving to the next, which meant endless back-and-forth to get everything “just right” before advancing.\nIn those days, stakeholders would often hold off on signing until they felt 110% sure that everything was perfect, as any further tweaks would require a tedious “change control” process. Change was seen as a problem, something to avoid, and a cause for long debates and delays.\nBut here’s the reality—change always happens. I can’t think of a single project where something didn’t need adjusting midway. Yet, this old-school process led to friction, delays, and a lot of stress all around.\nWhen the Manifesto for Agile Software Development it was a game-changer. It encouraged us to rethink software development from the ground up, embracing change rather than resisting it. The big question was, “If change is inevitable, why not build it right into the process?”\nSince then, I’ve worked with countless clients and watched agile evolve into one of the most popular approaches in software development. But here’s the thing: even though agile is everywhere now, I often see teams missing the core of what it’s really about. They’re using the lingo, but sometimes without fully understanding the purpose behind these practices—how they’re meant to make projects more adaptable, collaborative, and ultimately successful.\nSo, that’s me—a long-time software developer, coach, and consultant, with a focus on helping teams understand and truly live the agile mindset. After all, it’s not about rigidly following processes or sticking to buzzwords; it’s about adapting, growing, and delivering something truly valuable.\n"},{"id":1,"href":"/practices-and-techniques/replace-sprint-reviews-with-steering-meetings/","title":"“Steering Meetings” Instead of \"Sprint Reviews\"","section":"Practices and Techniques","content":" Rethinking the Sprint Review: Why a “Steering Meeting” is Better # For many agile teams, the Sprint Review has become a standard end-of-sprint ritual. But here’s the truth: Sprint Reviews aren’t working the way they were intended to. Instead of supporting continuous improvement, they often cause delays, create bottlenecks, and restrict the team’s ability to adapt quickly. Let’s look at why Sprint Reviews are a broken concept and why shifting to a Steering Meeting could be a much more effective approach.\nWhy Sprint Reviews Are a Broken Concept # The Scrum Guide states that Sprint Reviews shouldn’t act as a gate for releasing value. In theory, increments can be delivered to stakeholders anytime during the sprint, and feedback should be gathered continuously. According to the Scrum Guide:\n“Multiple Increments may be created within a Sprint. The sum of the Increments is presented at the Sprint Review thus supporting empiricism. However, an Increment may be delivered to stakeholders prior to the end of the Sprint. The Sprint Review should never be considered a gate to releasing value.”\nYet, in practice, many Scrum teams end up doing exactly that—treating the Sprint Review as a gate. Often, the completed work is deployed just before the review meeting, and the team presents what’s now in production. At this point, feedback is too late to act on, making it impossible to implement any changes before the next sprint starts. In other cases, the team plans to release the entire sprint’s work right after the review, but the product owners are reluctant to delay deployment because the team needs to close the sprint and move forward. Both situations are far from ideal.\nDelays in Feedback # Having a “review” session encourages teams to hold off on getting feedback until the end of the sprint, slowing progress. Teams may hold back, reasoning that the review session exists specifically to gather feedback. But in reality, a continuous feedback loop would be far more effective, allowing the team to address issues as they arise rather than waiting for the review.\nImagine this scenario: a user story is marked as \u0026ldquo;completed,\u0026rdquo; and the developers move on to the next task. But when the product owner sees the work in the Sprint Review, they might request changes that could have been made earlier. With timely feedback, the team could potentially implement these adjustments within the same sprint, while the work is still fresh.\nA Flawed Goal: Completing Work for the Sprint Review # When teams work toward completing tasks for the Sprint Review, they lose sight of continuous improvement. Ideally, feedback should happen when it’s most relevant, not just at the end of a sprint. Sprint Reviews encourage a focus on “completing things in time” for a scheduled session instead of focusing on quality, user satisfaction, and iterative progress.\nThe reality is that the end of a sprint isn’t the time for a “review”; it’s the time to assess ongoing progress toward broader goals.\nReplacing Sprint Reviews with Steering Meetings # Instead of having a Sprint Review, which focuses on reviewing past work, consider adopting a Steering Meeting that looks forward. A Steering Meeting is an interactive discussion between the team and stakeholders about the near-term and long-term direction of the project. Here’s how it can work.\nContinuous Feedback with Walkthrough Videos # To ensure the product owner can review features as they’re completed, consider creating a short video walkthrough of each completed user story. This way, product owners and stakeholders can watch these videos at their convenience, providing feedback promptly rather than waiting for the end of the sprint. These videos also allow stakeholders to see each feature in action without interrupting development flow, creating a truly continuous feedback loop.\nBy organizing these videos in a shared location, anyone on the team can access them at any time. This setup keeps everyone on the same page, without waiting for a formal review session.\nSteering Meetings: Looking Ahead Instead of Backward # A Steering Meeting is a forward-focused session where stakeholders and the team discuss the project’s direction. It’s less about “reviewing” past work and more about “steering” toward future goals. The goal is to capture insights from stakeholders on both immediate and long-term priorities.\nDuring the Steering Meeting:\nStakeholders share their thoughts on the direction of upcoming features. The team and stakeholders discuss short-term priorities and the evolving roadmap. The conversation is interactive, encouraging stakeholders to voice any new ideas or concerns about the application’s direction. This meeting structure also gives the team time to reflect on the project’s overall direction and any adjustments needed to align with stakeholder goals.\nBenefits of Steering Meetings Over Sprint Reviews # Reduced Meeting Length and Cost: Sprint Reviews often end up being long and time-consuming, taking up the entire team’s time. Steering Meetings, by contrast, can be shorter and more focused on forward-looking discussions, keeping everyone engaged.\nConstructive, Forward-Looking Conversations: Sprint Reviews often focus on the past and can lack constructive conversation about where the project is headed. Steering Meetings shift the focus toward upcoming priorities, fostering a shared vision for the future.\nTimely Feedback: By replacing Sprint Reviews with Steering Meetings, teams can shift toward a continuous feedback model, where input on completed work is gathered throughout the sprint. This real-time feedback allows for more meaningful improvements without waiting until the sprint’s end.\nStakeholder Engagement and Satisfaction: Steering Meetings create a collaborative environment where stakeholders can voice feedback, ideas, and concerns about the project’s direction. This keeps stakeholders engaged and ensures their input directly impacts future work.\nConclusion: Why Steering Meetings Are Better Than Sprint Reviews # Sprint Reviews, as commonly practiced, are expensive in terms of time, disrupt team focus, and often lack engagement. They’re focused on the past, but agile development benefits most from discussions focused on steering toward a better future.\nBy replacing Sprint Reviews with Steering Meetings, teams can foster a more interactive and proactive approach, keeping everyone aligned on the project’s direction. The result? A development process that’s faster, more collaborative, and geared toward continuous improvement.\n"},{"id":2,"href":"/concepts/","title":"Concepts","section":"Introduction","content":" Concepts # Not All Work Belongs in the Sprint What is Velocity, and Why It’s Not That Important "},{"id":3,"href":"/practices-and-techniques/deploy-mid-sprint/","title":"Deploy Mid-Sprint","section":"Practices and Techniques","content":" Deploy Mid-Sprint # The Benefits of Deploying Mid-Sprint: Why Wait?\nIn many agile teams, there’s an assumption that deployments should happen at the end of each sprint—wrap up all your tasks, complete testing, and deliver everything in one neat package. But is this the best approach? What if we could deploy as soon as each feature or improvement is ready, even if it’s mid-sprint? Here’s why deploying mid-sprint can actually help your team, your product, and your users in more ways than you might expect.\n1. Faster Feedback Loops # One of the biggest benefits of deploying mid-sprint is that it enables faster feedback loops. Instead of waiting until the end of the sprint to get insights from stakeholders, users, or metrics, you’re getting that feedback as soon as new features or changes hit production. This early input can reveal unexpected bugs, usability issues, or misalignments with the product vision. By catching these earlier, you have more time to adjust course, if needed, within the same sprint.\n2. Improved Team Morale and Momentum # Releasing valuable work mid-sprint can be a huge morale booster for the team. Developers get a sense of accomplishment, knowing their work is live and making an impact. This steady progress helps keep motivation high and builds momentum for the team. Each deployment, however small, reinforces that the work matters and contributes to the product’s evolution in real time.\n3. Reduced Pressure and Risk # Waiting until the end of the sprint to deploy can create pressure to cram everything in at once, making the process more stressful and error-prone. If you’ve got all features, bug fixes, and improvements bundled up for one big deployment, a single issue can delay the entire release. Deploying mid-sprint distributes the workload more evenly, minimizing the impact of any single error and allowing for quicker fixes without affecting other parts of the release.\n4. Better User Experience # Frequent, smaller deployments mean users get continuous, incremental improvements rather than having to wait weeks to see new features or fixes. With mid-sprint deployments, you can deliver small enhancements or fixes as soon as they’re ready, keeping users engaged and satisfied. And if something isn’t working quite right, it’s much easier to address and update quickly, preventing small issues from growing into bigger problems.\n5. Easier Testing and Troubleshooting # Deploying mid-sprint gives your QA team and developers smaller, more manageable pieces to test, troubleshoot, and monitor in production. With smaller deployments, it’s easier to isolate and identify issues as they occur, leading to quicker resolutions and a more stable codebase. By addressing issues earlier, you’re maintaining a higher quality product and reducing the chances of major issues piling up before sprint-end.\n6. Supports Continuous Improvement and Learning # One of the core principles of agile is continuous improvement, and mid-sprint deployments feed directly into that philosophy. By deploying smaller chunks of work regularly, teams are in a constant cycle of building, releasing, and learning from real-world results. This process fosters a mindset of experimentation and learning, where teams aren’t waiting for the “perfect” solution but instead are iterating, improving, and adjusting based on actual user needs.\n7. Flexibility to Respond to Changing Priorities # In fast-moving projects, priorities can shift unexpectedly, and sometimes new requirements arise that are crucial to address immediately. Deploying mid-sprint gives teams the flexibility to release higher-priority updates or fixes without waiting for the sprint to end. This flexibility is invaluable in environments where adaptability is key and where meeting customer or market needs quickly can be a competitive advantage.\nMaking Mid-Sprint Deployment Work for Your Team # To get the most out of mid-sprint deployments, a few practices can help ensure everything runs smoothly:\nFeature Toggles: Use feature toggles to control which features are visible to users, allowing you to deploy code without necessarily activating it for everyone.\nAutomated Testing and CI/CD Pipelines: A reliable CI/CD pipeline with automated tests is crucial for frequent deployments. It ensures each change is tested thoroughly and ready for production without requiring a manual, time-intensive process.\nClear Communication: Keep stakeholders informed about the benefits of mid-sprint deployments and how they fit into the overall agile workflow. Having alignment across the team will help keep everyone on the same page.\nMonitor and Iterate: Regularly review the impact of mid-sprint deployments on product quality and team productivity. Use insights from these deployments to continually refine your processes.\nFinal Thoughts # Deploying mid-sprint isn’t just about speed; it’s about delivering continuous value, reducing risk, and fostering a more resilient, adaptable team. When each piece of work is ready to go, don’t let it sit in the backlog or wait until the end of the sprint. Get it into production, get feedback, and keep improving. After all, agile is about responding to change—and there’s no better way to stay responsive than by deploying whenever something is ready, not just at sprint-end.\n"},{"id":4,"href":"/practices-and-techniques/drop-traditional-job-titles/","title":"Drop Traditional Job Titles","section":"Practices and Techniques","content":" Why Agile Teams Should Drop Traditional Job Titles # In agile teams, we’re all about collaboration and adaptability. But one thing that can still hold teams back is sticking to traditional job titles—like “Front End Developer,” “QA Analyst,” “Backend Developer,” and “Web Designer.” While these titles reflect valuable expertise, they can also encourage people to silo themselves into specific tasks.\nInstead, teams should consider adopting a unified title, like “Software Builder” or “Implementer” for everyone actively working on user stories. This simple shift can improve team dynamics, create a more collaborative atmosphere, and help people grow into well-rounded contributors. Let’s explore why adopting a unified title can strengthen agile teams, enhance productivity, and make the software development process more efficient.\nThe “Whole Team” Approach: A Key Agile Principle # Agile principles are all about building software as a “whole team.” This concept, rooted in eXtreme Programming (XP), encourages everyone on the team to work together toward a shared goal. When everyone is a “Software Builder” rather than a designer, tester, or coder, people are more likely to share responsibilities, support each other, and develop a stronger sense of ownership over the product.\nInstead of defining responsibilities by job title, each person on the team can be identified as a “Software Builder” with specific expertise:\nSoftware Builder with expertise in Web Design Software Builder with expertise in Backend Java Development Software Builder with expertise in Quality Assurance This approach highlights individual strengths while fostering a collaborative mindset. It also keeps people open to exploring other aspects of development, helping them gain a broader understanding of the product and the skills needed to build it.\nBreaking Down Silos and Encouraging Collaboration # Traditional job titles often create silos, where individuals feel restricted to certain types of tasks. If someone is titled “QA Analyst,” they may see testing as their primary role, while “Frontend Developers” may focus only on UI tasks. This division can slow down progress, especially if tasks need to be passed between team members with specific titles.\nWhen everyone takes on the title “Software Builder,” it encourages a shift in mindset. Tasks aren’t limited by title; instead, anyone on the team who feels they can handle a task should take it on. Here’s an example:\nExample Scenario: Building a “Forgot Password” Feature # Imagine the team is working on a user story to create a “Forgot Password” feature. To complete this feature, the following tasks are required:\nDesign and build the web form UI Determine the form validation rules Implement the backend code for validation Make any necessary database schema changes Write the instructional text and error messages Test the end-to-end user experience Traditionally, specific roles would handle these tasks—designers work on the UI, backend developers handle database changes, and QA is responsible for testing. But in an agile team where everyone is a “Software Builder,” anyone who has the skills or is willing to learn can pick up a task. If the form design is simple and consistent with other forms, anyone on the team can handle it, and the same goes for testing a straightforward UX flow.\nThis approach minimizes bottlenecks and encourages team members to cross-pollinate their skills. Instead of waiting for someone with a specific title to handle each part, tasks can move more smoothly, and team members grow their knowledge across areas.\nBenefits of the “Software Builder” Title # Adopting a shared title has several practical benefits for agile teams:\nFaster Progress and Fewer Bottlenecks: When team members aren’t limited by titles, they can pick up tasks based on what needs to be done, not what their job title says. This flexibility reduces delays, as people aren’t waiting for specific roles to handle tasks.\nMore Cross-Training and Skill Sharing: With everyone encouraged to take on various responsibilities, team members have more opportunities to learn new skills. This cross-training helps individuals become more versatile, and the team becomes more resilient.\nImproved Estimation and Input: When it’s time to estimate stories, more people can provide input, as they’re not siloed into one discipline. The team gains a wider perspective on the effort required for each task.\nBroader Ownership of the Product: Everyone on the team contributes to the software as a whole, rather than focusing on isolated tasks. This sense of shared responsibility can lead to higher-quality work and a more cohesive product.\nPractical Considerations for Adopting the “Software Builder” Mindset # Switching to a shared title doesn’t mean everyone has to know every aspect of development on day one. The goal is to encourage everyone to contribute and grow their skills, so they’re willing and able to pitch in wherever needed. Here are some practical tips:\nOrganize Tasks by Priority, Not Job Title: When planning, focus on what tasks need to be done to complete the user story, and let anyone with the capability or willingness take them on. This keeps tasks flowing smoothly.\nEncourage Skill Building: Foster an environment where team members can learn new skills. If someone wants to gain more experience in a different area—like a designer learning about deployment or a QA analyst learning UI design—support it.\nEmpower Everyone to Make Simple Fixes: Even if someone’s primary expertise isn’t in coding, they should feel comfortable making small changes, like fixing typos, and deploying to staging. Everyone on the team should have basic access to source control and be able to make simple adjustments.\nProject Manager vs. Software Builder: If someone, like a project manager, wants to contribute to user stories, they should take on the “Software Builder” title and be ready to help with various tasks. Otherwise, they should keep the “Project Manager” title, distinguishing them from those actively building the product.\nFinal Thoughts: Embrace the “Software Builder” Mindset # Dropping traditional titles for a more unified title like “Software Builder” or “Implementer” can transform team dynamics, reduce bottlenecks, and improve collaboration. It encourages everyone to take ownership of the product and be willing to learn whatever is necessary to support the team’s goals.\nWhen everyone sees themselves as a Software Builder, no one can excuse themselves from essential work because it “isn’t their job.” Instead, everyone works together toward a shared goal of building high-quality software—adapting, learning, and growing along the way.\n"},{"id":5,"href":"/practices-and-techniques/feature-walkthrough-videos/","title":"Feature Walkthrough Videos","section":"Practices and Techniques","content":" Ditch the Sprint Review Demos: Use Walkthrough Videos Instead # Traditionally, teams wait until the Sprint Review to present newly completed features to stakeholders and the rest of the team. But there’s a better way! Recording individual walkthrough videos for each new feature—right after it’s built—provides flexibility, speeds up the feedback loop, and ensures that everyone stays updated throughout the sprint.\nInstead of waiting until the end of the sprint to showcase work, teams can record quick demos as features are completed. By organizing these videos in a shared location, they become a valuable resource for the team, offering multiple benefits over the standard “Sprint Review” presentation.\nBenefits of Feature Walkthrough Videos # Let’s look at some of the key advantages of recording walkthrough videos for new features:\nWatch at Your Own Convenience\nA video walkthrough means team members, stakeholders, and even external users can view the new feature at their own pace. No more coordinating schedules or sitting through lengthy review sessions to catch up on the latest features. Everyone can access the video when it works best for them, improving engagement without interrupting workflows.\nReview Again at Any Time\nOnce recorded, videos become a lasting resource. Stakeholders can revisit videos whenever they need a refresher, or when they want to reference a feature as it evolves. This is particularly helpful if someone joins the project mid-sprint or needs to see how a feature has changed over time.\nStay Updated in Real Time, Not Just at Sprint’s End\nWaiting until the Sprint Review to demo features means that the rest of the team and stakeholders may be left in the dark until the end of the sprint. By recording walkthroughs immediately after a feature is built, team members can stay updated on progress as it happens, understanding the new functionality and how it fits into the overall product vision.\nFaster Feedback Loop\nWalkthrough videos allow stakeholders and team members to provide feedback as soon as they view the feature, rather than waiting for the next Sprint Review. This keeps the feedback loop tight, making it easier to catch potential issues early. A fast feedback cycle helps the team make adjustments while the work is still fresh, reducing rework and ensuring the product better aligns with user needs.\nEasy Re-Recording as Features Evolve\nAgile development is all about adaptability, and walkthrough videos make it easy to keep everyone updated as features change. If additional modifications are made to a feature, simply record a new video. This keeps everyone up-to-date on the latest version without requiring lengthy explanations during review sessions.\nHow to Organize and Share Walkthrough Videos # To maximize the benefits of video walkthroughs, it’s important to keep them organized and easily accessible. Here are some tips for managing these videos:\nCreate a Shared Repository: Use a shared platform or repository (e.g., a project management tool, cloud storage, or a dedicated folder) where everyone on the team can access videos. Organize videos by sprint, feature name, or project section to make it easy to find specific walkthroughs.\nAdd Annotations or Time Stamps: For complex features, consider adding annotations or time stamps within the video or in the description. This makes it easier for viewers to jump directly to specific parts or key interactions.\nEncourage Timely Feedback: Set up a process for gathering feedback on walkthrough videos, such as a dedicated channel, thread, or comments section. This encourages everyone to watch and respond promptly, keeping the feedback loop active.\nNotify the Team When a New Video Is Available: A quick notification (in Slack, email, or the project management tool) lets the team know a new walkthrough video is available for viewing. This keeps everyone in the loop without the need for a formal presentation.\nWhy Walkthrough Videos Work Better Than Sprint Reviews # Recording walkthrough videos offers several advantages over traditional Sprint Review demos:\nFlexible and On-Demand: With videos, team members and stakeholders can watch whenever it’s convenient, without scheduling a specific time.\nEngaging and Efficient: Videos can be shorter and more engaging than lengthy review sessions, keeping attention focused on the new feature without the distractions of an extended meeting.\nForward-Focused Sprint Reviews: By shifting demos out of the Sprint Review, the meeting can be used for broader, forward-looking discussions instead of focusing solely on what was built in the past sprint. This allows the team to steer the project in the right direction rather than rehashing completed work.\nEasily Replaced or Updated: Features often go through multiple iterations. With a video, it’s easy to re-record or add updated walkthroughs as changes are made, keeping everyone up-to-date on the latest version without confusion.\nConclusion: Embrace Walkthrough Videos for a Smarter Workflow # Switching from Sprint Review demos to individual walkthrough videos can revolutionize how your team collaborates, communicates, and responds to feedback. With on-demand videos, everyone can stay informed at their own pace, offer timely feedback, and maintain a continuous feedback loop throughout the sprint. Agile is all about adaptability and responsiveness, and using walkthrough videos is a simple, effective way to make the process smoother and more flexible.\n"},{"id":6,"href":"/practices-and-techniques/implementers-and-important-resources/","title":"Implementers \u0026 Important Resources","section":"Practices and Techniques","content":" Clarifying Roles in Agile Teams: Implementers and Important Resources # In agile teams, clarity of roles is essential for smooth, efficient progress. A common pitfall for many teams is treating all contributors as if they share the same responsibilities and availability. But understanding the difference between “Implementers” and “Important Resources” can make a big difference in workflow, estimation accuracy, and team alignment.\nHere’s a breakdown of the roles, actions, and responsibilities for both Implementers and Important Resources, and how recognizing these distinctions can help your team stay on track.\nThe Role of an Implementer # Implementers are the core team members directly responsible for building, testing, and delivering the software. They take ownership of the user story work, ensure quality, and engage in daily sprint activities. Implementers are the primary drivers of progress in each sprint, and they actively collaborate to achieve the team’s goals.\nKey Duties and Responsibilities of Implementers:\nDaily Progress Updates: Implementers attend daily scrums and share updates on their work, keeping everyone in the loop on the sprint’s progress and any roadblocks they encounter.\nEngagement in Retrospectives: Implementers actively participate in retrospectives, providing insights on what’s working well and areas for improvement. This feedback helps the team continuously refine their process.\nAbility to Make Minor Fixes: Each implementer has the access and skills necessary to make small adjustments to the codebase and deploy changes to staging or production, which enables quick fixes without unnecessary delays.\nOwnership of PBI Work: Implementers take full ownership of Product Backlog Item work in the sprint. They are responsible for the completion of these tasks and ensuring quality before the work moves to production.\nUnderstanding of the Codebase and System: Implementers put in the effort to understand the application, architecture, and codebase well enough to estimate and implement stories accurately.\nCollaborative and Proactive: Implementers reach out to other team members or Important Resources whenever they need additional help or expertise to complete their tasks effectively.\nIn short, Implementers are hands-on team members who build and maintain the software, communicate progress daily, and are committed to the end-to-end quality of the application.\nThe Role of an Important Resource # Important Resources are team members or external contributors who provide specialized support to the implementers. While they\u0026rsquo;re npt ultimately responsible for the user stories work progress, their expertise is critical for the completion of specific tasks within those stories. Important Resources make themselves available to the team as needed but don’t engage in core agile activities like daily standups or retrospectives.\nKey Duties and Responsibilities of Important Resources:\nAvailability for Implementers: Important Resources make themselves available to answer questions, complete specialized tasks, review work, and provide feedback to Implementers when needed. They contribute their expertise to support the team’s goals.\nAssigned to Specific Tasks in User Stories: Important Resources may take on specific tasks within a user story, but they don’t hold responsibility for the overall completion of the story. For example, a copywriter might draft the text for a feature, but the Implementer manages the full feature’s development and integration.\nNo Ownership of the User Story Progress: Important Resources don’t take full ownership of any user story. They contribute to the story work but aren’t responsible for its delivery or deployment.\nCommon Examples of Important Resources # Copywriters: Provide content or messaging for the application but aren’t responsible for the feature’s development or design. Translation Experts: Handle localization tasks, enabling the application to work in multiple languages. Tech Operations: Assist with deployment, server management, and infrastructure support, typically outside of daily sprint work. Cloud Computing Experts: Offer guidance on cloud architecture, scaling, or cost management but aren’t involved in day-to-day coding or feature development. I.T. Accessibility Experts: Ensure compliance with accessibility standards but aren’t responsible for coding or integrating accessibility features. Project Managers: Oversee the broader timeline, resources, and project scope but don’t actively work on user stories. The Impact of Misunderstanding These Roles on Estimation and Timelines # One of the biggest issues agile teams face is inaccurate estimation and missed timelines due to the reliance on Important Resources without accounting for their availability. Important Resources are often not full-time on the project and may have other commitments, such as working on multiple projects, taking time off, or shifting roles. These factors can cause delays in completing user stories that depend on these resources.\nSince Important Resources typically aren’t involved in estimation meetings, their input may be missed, leading to inaccurate estimates. For example:\nAvailability Gaps: Important Resources might not be available when needed, delaying work. If a critical resource is unexpectedly unavailable, it can create significant bottlenecks. External Commitments: Important Resources often split their time across multiple projects, making their schedule unpredictable for the agile team. Unforeseen Delays: Important Resources may change jobs, get promoted, or take unexpected leave, affecting project timelines if no one else can cover their tasks. Understanding and planning for these dependencies during estimation and planning can help the team set more realistic goals and timelines.\nTips for Agile Teams: Improving Estimates by Considering Important Resources # To create more accurate sprint plans, it’s essential to account for the contributions of Important Resources. Here are some ways agile teams can address this challenge:\nInclude Resource Dependencies in Estimations: When estimating user stories, consider dependencies on Important Resources and account for any additional time needed if those resources may be delayed.\nDiscuss Resource Needs During Sprint Planning: Implementers should communicate resource needs to Important Resources early on. This proactive approach helps Important Resources plan their availability and ensures they’re able to support the team when needed.\nPrioritize Flexible Schedules: If Important Resources are temporarily unavailable, the team can prioritize tasks that don’t rely on them, minimizing idle time and keeping the sprint moving forward.\nConclusion: Clarifying Roles for a Smoother Agile Workflow # By clearly defining who is an Implementer and who is an Important Resource, agile teams can improve efficiency, collaboration, and timeline accuracy. Implementers are the primary builders who take ownership of the user story work, actively participate in agile ceremonies, and deliver the product. Important Resources provide essential support and expertise but don’t have the same level of responsibility or involvement.\nWhen teams understand these roles and consider them in their planning and estimation, they can achieve more accurate timelines, reduce bottlenecks, and create a more efficient workflow. Embrace this role clarity, and you’ll set up your agile team for greater success.\n"},{"id":7,"href":"/practices-and-techniques/keep-detailed-specs-out-of-user-stories/","title":"Keep Detailed Specifications Out Of User Stories","section":"Practices and Techniques","content":" Keep Detailed Specifications Out Of User Stories\u0026quot; # One of the challenges teams often face when working in agile is balancing high-level user stories with the intricate details of technical specifications. A solution? Keep your detailed specifications as separate documents, and have your user stories refer to them.\nWhy? When specifications are embedded directly in user stories, it can make the stories harder to work with. The stories become bloated and difficult to adjust, split, or discard. By separating the two, you’re free to keep stories focused, lean, and adaptable.\nThe Benefit of Separate Specs and Stories # Separating specifications from stories allows you to:\nWrite user stories that are quick to read and understand, even if they point to a more complex spec. Easily throw out, rewrite, or modify stories as needs change without losing the core specs. Split stories to deliver incremental portions of a feature without being bogged down by every single detail from the specification. Create a clear structure that specifies an entire component’s end goal while delivering parts of it iteratively. This setup is especially useful when building complex features that can be delivered in phases, with each phase being functional and deployable, though not yet fully built out.\nExample: Building a Calendar Component # Let’s say we’re building a calendar component for a website. The final calendar component will include a grid view that’s fully accessible (meeting WCAG standards) and allows users to drag and drop events, both with a mouse and a finger (for mobile devices).\nWe’d create a detailed specification document that outlines everything this calendar should do in its final form. This spec would include:\nThe grid layout and its accessibility features. Drag-and-drop functionality. Design, color contrasts, keyboard navigation, mobile responsiveness, etc. With this specification as a standalone reference, we can then write the first user story as a slice of the full functionality.\nFirst Story Example: Basic Event Listing # User Story 1:\n“As a user, I want to see a list of upcoming dates and events, so I can quickly know what’s scheduled.”\nThis story doesn’t attempt to build the grid or implement any drag-and-drop features. Instead, it provides a basic, deployable solution that lets users see dates and events listed. The story refers back to the full calendar specification, so the team knows it’s part of a bigger picture. But it only addresses a subset of the feature—the event listing.\nAdditional Stories: Incremental Improvements # Later stories can build on this foundation. For instance:\nStory 2: Add a grid structure for events, allowing users to see a month’s layout with dates and events displayed in each cell. Story 3: Enable keyboard navigation to align with accessibility requirements. Story 4: Implement drag-and-drop functionality for events on desktop. Story 5: Extend drag-and-drop to mobile (touchscreen) devices. Each story remains tightly focused while the specification keeps the end goal clear. This approach means you can deliver value to users incrementally, even as the full feature is still under development.\nWhy It Works # By structuring your work this way, you’re making it easier to:\nWrite and rewrite stories without losing sight of the bigger picture. Build and deploy features gradually, without overwhelming your team. Maintain flexibility in your stories, which keeps your process agile, not bogged down by details. Try this approach for your next project and see how much more manageable stories become. With separate specs and stories, you’re setting up your team to build, iterate, and release features effectively—without sacrificing the detailed planning that’s essential to delivering a quality product.\n"},{"id":8,"href":"/concepts/the-dual-streams-of-software-development/","title":"Not All Work Belongs in the Sprint","section":"Concepts","content":" Not All Work Belongs in the Sprint: The Dual-Streams of Software Development # In agile development, we’re often focused on user stories and sprint planning, but not every task truly belongs in a sprint. Maintenance and infrastructure work, like security patches, framework updates, and cloud configurations, play a crucial role in keeping an application running smoothly—but these aren’t the kind of work stakeholders usually think of when they’re discussing priorities.\nTo keep things organized and efficient, teams should adopt a dual-stream approach: one stream dedicated to product features (the sprint) and another for infrastructure and maintenance work. This approach helps clarify responsibilities, ensures a smoother sprint process, and allows teams to focus on user-facing work without getting bogged down by behind-the-scenes tasks.\nUnderstanding the Difference: Maintenance Work vs. Sprint Work # In simple terms, maintenance work is the ongoing effort to keep an application stable, secure, and up-to-date. This can include tasks like:\nApplying software security patches Managing log files and backups Upgrading versions of programming languages (e.g., Java) or frameworks (e.g., Spring, React) Configuring or updating cloud environments Ensuring compatibility with newer versions of phone devices and web browsers These tasks have their own timelines and requirements, often dictated by external factors (e.g., security deadlines or platform support changes). This is usually not the type of work that the product owner would be responsible to prioritize; it’s necessary work to keep the application operational, regardless of whether stakeholders request new features.\nIn contrast, sprint work is about delivering value to the user—enhancements, new features, and improvements that stakeholders have asked for and prioritized.\nThe Right Work for the Right Stream # When the stakeholders say, “Just keep the application up and running smoothly,” they’re describing a maintenance state. Maintenance work ensures that everything continues working without interruption, even if no new features are added. But when stakeholders say, “We want these new features,” they’re asking for product development, which is where sprints come in.\nUsing a dual-stream approach, we can:\nKeep maintenance tasks in an infrastructure/maintenance stream, ensuring that necessary updates don’t clutter the sprint backlog. Focus the sprint stream on work that the product owner has explicitly prioritized, enabling the team to deliver valuable features without distractions. Handling Infrastructure as a Pre-Condition for Sprint Work # Sometimes, infrastructure work must be completed before a user story can be implemented. For example, to build a new feature, the team might need to:\nSet up new environments or tools Upgrade the framework to the latest version Acquire additional resources or access In these cases, the infrastructure work can be linked as a blocker to the user story. This way, the story will remain in the backlog until it\u0026rsquo;s unblocked, allowing the team to negotiate with stakeholders and set expectations. It’s clear that the infrastructure work isn’t being prioritized by the product owner but is required to complete the story effectively.\nAdvantages of Separating Infrastructure/Maintenance from the Sprint # Less Burden on the Product Owner: Product owners don’t need to prioritize tasks they don’t fully understand or request directly. They can focus on user-facing features without getting bogged down by the technicalities of infrastructure.\nCleaner Backlog: By keeping maintenance and infrastructure tasks out of the sprint backlog, teams can keep the backlog focused and easier to manage.\nAccurate Story Estimations: Infrastructure work often has unpredictable timelines and dependencies. By keeping it separate, user story estimations aren’t disrupted by factors outside the team’s immediate control.\nFewer Dependencies: With infrastructure work happening outside of the sprint, the team faces fewer dependencies that could delay user stories or cause sprint bottlenecks.\nBetter Planning and Negotiation: When infrastructure tasks are separate, the team can negotiate timelines for this work before bringing related user stories into the sprint. Stakeholders are assured that any infrastructure work won’t impact their priorities unless absolutely necessary.\nReduced Sprint Disruptions: Sometimes, project managers or product owners can help expedite infrastructure work ahead of a sprint, allowing the sprint team to work with fewer obstacles and at a consistent pace.\nUltimately, the sprint stream should focus on what the product owner wants to prioritize, while infrastructure tasks should stay in the maintenance stream to support these priorities without cluttering the sprint.\nA Real-Life Example: Maintenance Mode and Resuming Sprints # Imagine a scenario where an application was completed and has been running smoothly in maintenance mode for over a year. Now, stakeholders have approved funding to add a new set of features. Often, teams will jump straight into running sprints, but this isn’t always ideal. Using a dual-stream approach, the team could strategically choose to first:\nUpgrade to the latest programming language or platform version. Update frameworks, libraries, and databases. Address technical debt or refactor code as needed. This preparation creates a strong foundation for the new sprint work. The team can enter sprints with up-to-date tools, increased speed, and the ability to use new framework features. Without this step, the team might face limitations or potential bugs due to outdated software.\nExample: Framework Upgrade to Enable a New Feature # Another common scenario is when a product owner requests a small improvement—say, an additional feature on a calendar widget. However, the calander widget is part of a package collection of widget and so it would require that the package and entire collection of widgets be upgraded in one go. Sometimes, to avoid dealing with this infrastructure work, developers might just leave the old collection in place and find a standalone widget to work around the issue. But this workaround can lead to inconsistencies in the look-and-feel, technical debt as the collection continues to fall behind the latest release version, and future maintenance headaches.\nInstead, using the dual-stream approach, the team could identify the framework upgrade as maintenance work and complete it before starting the sprint. This allows the sprint to focus on real feature work, with access to the latest framework capabilities and better support options.\nConclusion: Embracing the Dual-Stream Approach # When teams separate sprint work from infrastructure and maintenance, they gain clarity, control, and flexibility. The team has an ongoing infrastructure/maintenance stream where essential technical tasks happen, independent of the sprint planning. Once the foundational work is complete, the team can begin sprinting at full capacity, delivering the new features that the product owner and stakeholder are requesting.\nWhen deciding where a task belongs, consider:\nIs this something the product owner requested and can understand how to prioritize? Can this work be described in a user story and completed within a sprint? Or is this work required to maintain, support, and keep the the application running smoothly? By keeping infrastructure and maintenance tasks separate, agile teams can focus sprints on meaningful product work, ensuring a smoother process, better stakeholder alignment, and fewer unexpected hurdles.\n"},{"id":9,"href":"/practices-and-techniques/","title":"Practices and Techniques","section":"Introduction","content":" Practices and Techniques # Keep Detailed Specifications Out Of User Stories Deploy Mid-Sprint QA as Part of Development Suggestions Instead Of Requirements Sprint Reviews Feature Walkthrough Videos Drop Traditional Job Titles Split User Stories into Two Parts Implementers \u0026amp; Important Resources Why Future Sprints Should Stay Empty "},{"id":10,"href":"/practices-and-techniques/qa-as-part-of-development/","title":"QA as Part of Development","section":"Practices and Techniques","content":" QA as Part of Development # One common pitfall in agile teams is treating Quality Assurance (QA) as a step that follows development rather than making it part of the development itself. The reality? Quality needs to be a priority from day one, baked right into the development process.\nLet’s dive into why QA should be woven into the fabric of development—and how this approach can help your team deliver higher-quality work without the stress of last-minute testing and fixes.\nQuality Isn’t an Afterthought—It’s an Integral Part of Development # Quality should be part of every development conversation. As the team clarifies what needs to be done to complete a user story, they should also discuss:\nHow they’ll ensure the work meets quality standards. How they’ll confirm the new feature functions as intended through rigorous testing. With this proactive approach, developers and QA can plan for quality right from the start, pinpointing the areas that need close attention. This doesn’t just improve the final product; it also provides developers with insights into potential risks and unique scenarios they might not consider on their own.\nExample: Considering Shared Code for Multiple Languages # Imagine your team is working on an app with both English and German versions. While much of the app’s logic might be shared across both languages, there may be cases where the code differs slightly between the two. If the development and QA teams work together from the outset, they can establish where testing is needed for each language:\nShared Logic: If English and German versions share the same code for a particular feature, it might only need testing once. Separate Implementations: If there are two separate codebases for English and German, both will need thorough testing to ensure they’re fully functional. By bringing QA into the development process, you get a clear understanding of where testing is essential and where it’s redundant—streamlining the process and minimizing duplicate effort.\nCatching Edge Cases and Exceptional Scenarios Early # Experienced QA professionals are invaluable when it comes to spotting edge cases that developers might overlook. For instance, they might ask:\n“What happens if the database is down? Will the app handle it gracefully, or does it assume the database will always be available?” “How does the application work if a user’s keyboard is set to a right-to-left language, like Arabic or Hebrew?” “Can the app handle email addresses with special characters, like emojis in domain names?” By bringing these questions up early in development, QA helps the team account for unusual but realistic scenarios before they become issues. Addressing these potential pain points before they turn into real bugs saves everyone time and energy.\nReal-Time Collaboration Between Developers and QA # When QA is involved throughout the development process, they can often catch issues as code is being written. If a QA expert notices a potential problem, they can discuss it with the developer immediately, while the code is fresh in their mind. This is a far more efficient approach than waiting until the story is marked “done,” only to find that there’s an issue that requires revisiting code from weeks prior.\nWith QA input at every stage of development, teams can resolve issues faster, with fewer context-switching costs. Developers and QA work together, side by side, to ensure that each user story meets the agreed-upon standards.\nShared Responsibility for High-Quality Code # Ultimately, developers and QA should collaborate on quality. They both play an essential role in delivering robust, dependable features that meet user needs. When quality is a team responsibility, it fosters a shared commitment to high standards and a sense of pride in delivering work that’s reliable from the get-go.\nKey Takeaway: By making QA an integral part of development rather than a post-development step, teams can catch issues early, streamline testing, and ensure they’re building high-quality software from the very start. Agile is all about adapting and improving, so let’s adapt by treating quality as part of development, not something left for later.\n"},{"id":11,"href":"/practices-and-techniques/split-user-stories-into-two-parts/","title":"Split User Stories into Two Parts","section":"Practices and Techniques","content":" Split User Stories into Two Parts: For the Product Owner and the Implementors # One of the challenges teams often face is balancing clarity between what the product owner envisions and what the development team needs to know to make it happen. To streamline this, consider splitting user stories into two distinct sections: a top half for the product owner’s \u0026ldquo;ask\u0026rdquo; and a bottom half for the implementors’ technical notes.\nWhy Split User Stories? # The purpose of this approach is to keep the user story simple, clear, and free-flowing, while still giving the team the flexibility to jot down technical notes. This format encourages clarity, keeps the product owner’s requirements front and center, and allows developers to add technical details without cluttering the product owner’s main vision.\nLet’s look at the two parts in detail.\nThe Top Part: For the Product Owner # In the first part, the product owner describes what they want in their own words. This part should:\nBe written in language the product owner understands. Clearly describe the \u0026ldquo;ask\u0026rdquo; without any technical jargon. Be simple enough that the product owner could ideally write it themselves. When the product owner phrases the request themselves, it becomes more accessible to all team members, helping them understand the feature from the user’s perspective. This section should contain everything the product owner wants and expects, capturing the “why” behind the feature.\nExample # Let’s say the product owner wants a calendar component on a web page. Here’s how the top part might look:\nTop Half (for the Product Owner):\n\u0026ldquo;Add a calendar listing of events for this month. Ideally, the calendar should appear in a grid format, and the user should be able to easily navigate to other years and months.\u0026rdquo;\nThis part should be as clear and straightforward as possible, focusing on what the product owner wants the user to experience.\nThe Horizontal Rule: Separating Vision from Implementation # Add a simple horizontal rule (a divider line) beneath the product owner’s description. This visually separates the “ask” from the technical considerations. It’s a minor touch but helps distinguish what’s essential for the product owner from what’s needed by the developers.\nThe Bottom Part: For the Implementors # Below the divider, the implementors can add their own notes, assumptions, or considerations. This section is purely optional, intended to help developers by giving them a place to record any relevant technology choices, coding considerations, or dependencies.\nThis part doesn’t need to be structured or formal. Developers can write freely, recording whatever notes they feel will help clarify the implementation for the rest of the team.\nBottom Half (for the Implementors):\n\u0026ldquo;Check the UI component library to see if it already includes a calendar widget. If not, explore the ABC library to find a suitable calendar component.\u0026rdquo;\nUse One Text Area for Both Parts # For maximum flexibility, avoid adding two separate text areas for each section. Having one combined text area makes it easy to adjust the story on the fly. You can copy, paste, and rearrange content between the two sections as needed, or even split the story into new parts if necessary—all without switching between fields.\nFlexibility is Key # While this two-part structure can be helpful, it shouldn’t be forced onto every story. Agile teams thrive on flexibility, so keep this approach as an optional tool rather than a mandatory structure. Some stories may not need any technical notes at all, while others may benefit from extensive developer insight. Use this split format when it enhances clarity but feel free to go without it when a story is self-explanatory.\nSummary of Benefits # Splitting user stories this way can:\nMake the product owner’s vision clearer for everyone on the team. Provide a natural space for implementors to capture technical notes. Create a simple, flexible structure that’s easy to rearrange, copy, or split as needed. Allow agile teams to keep user stories clean, collaborative, and easy to understand. Use this structure to keep stories light and adaptable, while still giving both the product owner and the development team the clarity they need to create great features.\n"},{"id":12,"href":"/practices-and-techniques/suggestions-instead-of-requirements/","title":"Suggestions Instead Of Requirements","section":"Practices and Techniques","content":" Specs \u0026amp; Suggestions: Rethinking Requirements in Agile # In agile development, we often hear about “requirements,” but framing every request as a hard-and-fast requirement can bog down the process. Instead, I suggest teams think in terms of “Suggestions” and “Specifications”—with most requests starting as suggestions unless truly necessary to specify.\nWhy “Suggestions” Over “Requirements”? # By default, treating requests as suggestions rather than strict requirements gives the team more flexibility and room to explore creative solutions. Agile is all about adaptability, and suggestions allow developers to think critically about the best ways to achieve the desired outcome while staying nimble.\nUsing suggestions also fosters collaboration and discussion, opening the door for feedback from the team that might improve the end result. Specifications, on the other hand, are vital but should be reserved for things that genuinely need to be strictly adhered to.\nExamples of Suggestions # Suggestions are best used for elements that improve the user experience but don’t affect core functionality. They give teams room to make adjustments and find what works best within the project’s context.\nHere are some examples:\nLook and Feel: A preferred color scheme or font style for a calendar widget can be suggested. While a design team might have a vision, the developers can explore different ways to achieve a consistent look and feel without being overly rigid. Consistent Icons: It might be suggested that icons on a screen match those used in another application. While consistency is beneficial, small differences in iconography aren’t mission-critical and can be adjusted as needed. Drag-and-Drop Features: For a component like a calendar, drag-and-drop functionality could be suggested but not required right away. The team might deliver a simpler MVP with plans to add drag-and-drop in a later sprint, based on time, budget, or technical feasibility. When to Use Specifications # Specifications are essential for areas where consistency and exactness are necessary, often for functional, legal, or compliance reasons. Specifications define requirements that must be met precisely to avoid errors or regulatory issues.\nFor example:\nEmail Validation: If email address validation must match the standards in a master customer database, this needs to be a specification. Misaligned validation could cause inconsistencies in data entry, affecting the entire system. Terms of Use: Legal documents like a “Terms of Use” agreement need to be specified to ensure they’re accurate and current. This isn’t something teams can change or adapt without legal review. Device Compatibility: Ensuring an app is fully functional on the latest iPhone or Android device should be a specification, particularly if the target user base includes mobile users. Example of Flexibility: Screenshots in Documentation # One product owner might “suggest” that documentation screenshots match the latest UI exactly, while another product owner might be okay if there are minor differences, marking this as a suggestion rather than a requirement. This flexible approach lets teams focus their efforts where it matters most and revisit “nice-to-have” details when there’s time.\nBenefits of Suggestions from an Agile Perspective # Adaptability: Agile thrives on flexibility. Suggestions allow teams to find efficient solutions and avoid becoming bogged down by minor, non-critical details. Teams can decide if suggestions make sense or if tweaks would better serve the project’s goals.\nEncourages Creativity: Treating design and functionality as suggestions gives developers room to bring their insights and creativity to the table. This often results in better solutions that serve both the product and the end-user.\nPrevents Bottlenecks: When everything is a requirement, it can slow down the team’s progress. Suggestions free up the development process, allowing teams to make progress while focusing on what’s essential.\nImproves Prioritization: When only truly necessary elements are specified, teams can better prioritize their work. Specifications get the attention they need, while suggestions can be tackled as time and resources allow.\nBringing Suggestions and Specifications Together # Adopting this approach encourages ongoing collaboration between product owners, developers, and QA. Product owners can provide guidance through suggestions without being overly prescriptive, and developers have the freedom to prioritize and create the best possible product.\nIn agile development, quality and functionality are built through flexibility and adaptability, not rigid adherence to endless requirements. By distinguishing suggestions from specifications, your team can work smarter, focus on what matters most, and ultimately deliver high-quality, user-focused products without unnecessary constraints.\n"},{"id":13,"href":"/concepts/why-velocity-is-not-that-important/","title":"Velocity Isn't Important","section":"Concepts","content":" What is Velocity, and Why It’s Not That Important # Velocity is defined as: the amount of work (not value) that was delivered (not done) by the team in a sprint. In other words, it’s a measure of the completed work—not necessarily the value it brings to the product or the customer.\nWhile velocity is often treated as a critical measure of progress, it’s actually a very limited metric. Its only real use is to help the team approximate how much work to focus on for the next sprint. Beyond that, velocity isn’t as crucial as many people assume, and here’s why.\nThe Real Use of Velocity # The primary reason to track velocity is to determine how many Product Backlog Items (PBIs) to pull from the backlog for the next sprint. The team’s velocity gives a rough idea of what’s manageable within a sprint, which can help guide the discussion around how many PBIs to bring in.\nAgile teams maintain a large backlog of items, and it’s not efficient to discuss or estimate all of them every sprint. Instead, we “siphon off” a few PBIs from the top of the backlog—just enough for the team to begin discussing, estimating, and planning for the sprint. Velocity helps give an idea of what “just enough” might look like, but it’s not an exact science.\nIf we bring in too few PBIs, the team might finish early and need to have more discussions and estimations mid-sprint to pull in additional work. That’s not ideal, but it’s not a big problem either.\nIf we bring in too many PBIs, some may remain unfinished by the end of the sprint. In this case, we’ve invested time in discussing and estimating items we didn’t work on. Again, not ideal, but it’s not a huge issue.\nThe goal is simply to pull in a manageable number of PBIs that the team can invest time in discussing. And if we misjudge that number, it’s not the end of the world.\nWhy Velocity Fluctuates # Many teams get hung up on maintaining a consistent velocity, but there are plenty of reasons why velocity naturally changes from sprint to sprint. Here are a few examples:\nDifferent People Estimate Differently: Estimation is subjective. If a team member with deep experience in a particular area estimates a task, they may view it as quick to complete. But if someone else ends up working on it, it might take twice as long, impacting velocity.\nDependency on Important Resources: Some PBIs depend on external resources—perhaps a database setup, accessibility review, or procurement of a software library. If these dependencies aren’t met in time, the team may be delayed, impacting the sprint’s velocity.\nVarying Complexity of PBIs: Some sprints may include straightforward PBIs, while others are packed with complex work that requires more problem-solving, testing, and refinement. Naturally, this variation affects how much can be delivered in a sprint.\nTeam Composition Changes: When team members join, leave, or are temporarily unavailable, it affects velocity. A sprint with the full team may complete more PBIs, while a sprint with fewer members will likely deliver less.\nThe Problem with Treating Velocity as a Goal # A common misconception is to see velocity as a target. This pressure can lead to undesirable behaviors that actually harm the quality of the work:\nCutting Corners to Meet “Velocity Goals”: When velocity is treated as a benchmark of success, team members may feel pressured to complete all the PBIs within the sprint, even if time is tight. To achieve this, they may cut corners on testing, skip handling edge cases, or leave documentation incomplete—just to close tickets and meet an arbitrary velocity target.\nSlowing Down to Maintain “Stable Velocity”: Conversely, if team members finish PBIs early, they may slow down or delay checking in their work to avoid increasing the expected velocity for future sprints. Some teams might unconsciously “manage” their velocity to a stable level, to avoid creating pressure from upper management or stakeholders who might expect an ever-increasing velocity.\nBoth of these scenarios result from a misunderstanding of what velocity is and how it should be used.\nMisuse of Velocity and Its Impact # Putting too much importance on velocity leads to a fabricated sense of productivity. When velocity becomes a goal rather than a guide, teams may start taking steps that aren’t necessarily in the best interest of the product, the user, or even the team itself. The emphasis on velocity can:\nShift focus from the quality and value of work to the speed of task completion. Create unnecessary pressure, leading to rushed or subpar work. Result in artificial manipulation of the team’s pace, reducing transparency and honesty. Final Thoughts: Velocity as a Guide, Not a Goal # In reality, velocity is just a tool to help us decide how much work to plan for the next sprint. It doesn’t measure quality or value, and it shouldn’t be used to judge the team’s effectiveness. Teams will deliver differently from sprint to sprint, and that’s perfectly normal. By understanding that velocity is a simple planning tool, not a measure of value or productivity, agile teams can keep the focus where it belongs—on delivering high-quality work that brings real value to users.\nSo, while velocity is helpful for planning, it’s not nearly as important as many teams make it out to be. Keep your eyes on the bigger picture, and use velocity to guide—not dictate—your sprints.\n"},{"id":14,"href":"/introduction/whats-the-problem/","title":"What's the Problem?","section":"Introduction","content":" What\u0026rsquo;s the Problem? # Problem? What problem?\nMaybe your project is running smoothly. You know exactly what needs to be done, you\u0026rsquo;ve split up the work into sprints, and everything’s falling into place. Great! Fantastic!\nMaybe agile wasn’t even necessary because you have a clear vision and a well-defined path to reach it. Perfect!\nBut the agile approach wasn’t created for projects where everything is straightforward and well-defined from the start. It was designed for the other type of project—the ones where things aren’t so clear. Where the vision or requirements keep shifting as development goes on, or where the end goal isn’t entirely understood right from the beginning.\nHistorically, those situations led to a lot of stress and strain on teams. Projects would run over budget or off schedule, and developers would get frustrated as they tried to hit a moving target. Agile was developed to help teams handle these types of projects more effectively, to adapt and evolve without derailing everything.\nSo, What’s the Problem? # The problem is that, over the years, agile has drifted from its original intent. When the Agile Manifesto first came out, it sparked great discussions among developers about how to make it work in real-world projects. Early on, some teams began incorporating agile practices, making adjustments along the way. But somewhere down the line, agile started to lose its way.\nMany teams have reverted to old habits. They’ve held onto agile’s terms and ceremonies but have forgotten its core principles. Instead of creating flexibility, they’re back to rigid processes, making everything efficient but not necessarily effective. The very problems agile was supposed to solve are creeping back in!\nNow, many people think they’re “doing agile” because they use the buzzwords and go through the motions. But at its core, they’re still not fully embracing change or recognizing that quality and adaptability go hand in hand.\nThe Role of the Project Manager in Agile # Interestingly, many agile coaches and Scrum Masters might not realize that some of the original founders of agile disagree with how it’s being taught and practiced today. Agile was initially designed from the perspective of the software development team. It didn’t aim to replace project management but to focus on a self-managing team that builds and delivers software with minimal outside interference. However, agile teams still need someone to help clear obstacles, facilitate meetings, and coordinate between departments.\nA good project manager can play a crucial role by handling these broader responsibilities without micromanaging the team. Think of it like a restaurant kitchen: the kitchen staff—the chefs—know their craft. They organize themselves, handle different stations, and work together to ensure every dish comes out just right and on time.\nWhere’s the project manager in this scenario? Well, they’re like the restaurant manager. They don’t need to be in the kitchen telling the chefs how to cook; the chefs already know what they’re doing. Instead, the restaurant manager makes sure everything outside the kitchen is running smoothly: customers are happy, orders are being taken correctly, and the equipment is all functioning as it should.\nEmpowering the Team # In the same way, a project manager doesn’t need to be deeply involved in the day-to-day work of the developers. The team should be empowered to collaborate, solve problems, and figure out the best way to meet the project goals on their own. When issues arise, like missing resources or tooling problems, they should escalate them to the project manager only when necessary.\nIf developers run into a question about requirements, they can talk directly to the business analyst, who acts like the waiter in our restaurant analogy, bringing the customer’s “order” to the kitchen. The goal is to keep things flowing smoothly while letting the experts do what they do best.\n"},{"id":15,"href":"/practices-and-techniques/only-one-sprint/","title":"Why Future Sprints Should Stay Empty","section":"Practices and Techniques","content":" Why Future Sprints Should Stay Empty # In agile development, there’s a strong temptation to organize and plan work for future sprints. But placing stories into future sprints is a common pitfall that often leads to unnecessary pressure, reduced quality, and less flexibility.\nIn reality, the only sprint that exists is the current one. Everything else should remain in the backlog until it’s time to plan the next sprint. By keeping future sprints empty, teams can maintain agility, respond better to change, and prioritize quality over rigid planning.\nThe Problem with Pre-Filling Future Sprints # Let’s say a team begins adding stories to the “next sprint” before the current one is complete. At first, this might seem helpful, as if it’s creating a clear roadmap. But here’s why it’s actually harmful:\nPressure to Complete Prerequisite Stories: When items are already planned for the next sprint, it creates pressure to complete prerequisite work in the current sprint. Team members feel pushed to finish these stories on time so that the next sprint’s work can proceed as planned. This pressure can lead to rushed development, cutting corners, and reduced code quality.\nFalse Certainty: Agile is about adaptability, but pre-planning future sprints gives a false sense of certainty. Requirements often change, new priorities emerge, and what seemed important at the beginning of the sprint may shift. By keeping future sprints empty, teams stay flexible and better equipped to handle changes that inevitably arise.\nReduced Flexibility in Sprint Planning: Pre-filling future sprints restricts the team’s ability to respond to new information or re-evaluate priorities. The team may feel locked into a path that no longer serves the project’s best interests, limiting their ability to deliver the most valuable features.\nStakeholder Misalignment: When stories are placed in future sprints, stakeholders may start expecting specific timelines based on that planning. If priorities change or unforeseen issues arise, it can lead to disappointment, frustration, or a sense that the team isn’t delivering as promised.\nThe Alternative: Keep Stories in the Backlog Until Sprint Planning # Instead of pre-planning future sprints, it’s more effective to keep everything in the backlog until the next sprint planning session. Here’s how this approach works:\nSiphon from the Top of the Backlog: During sprint planning, simply pull in the highest-priority items from the top of the backlog. This method ensures the team is always working on the most valuable tasks, without prematurely committing to specific future sprints.\nUse Velocity to Guide Planning: The team’s velocity gives a rough estimate of how much work they can complete in a sprint. Stakeholders can look at velocity and the prioritized backlog to get a general sense of when certain features might be delivered. If a specific feature is needed sooner, stakeholders can work with the team to reorder the backlog.\nAddressing Stakeholder Concerns Without Future Sprint Planning # Stakeholders often want to know when they can expect a particular feature, and this desire for a timeline can lead to the habit of planning future sprints. Here’s a better approach for managing these expectations:\nBacklog Priority Adjustment: If stakeholders want a feature sooner, they can work with the Product Owner to move it higher in the backlog. By reprioritizing, the team can focus on delivering that feature in an upcoming sprint without pre-filling sprints.\nSplitting Stories for Incremental Delivery: Sometimes, a large story can be split into smaller, incremental pieces that provide value without waiting for the entire feature to be built. This way, stakeholders can start to see the benefits of a feature earlier, even if it’s not fully complete.\nUse Velocity to Estimate (with Caution): Although velocity is not an exact measure, it can give stakeholders a rough idea of when they might see specific features. Rather than locking these features into future sprints, stakeholders can understand that estimates are flexible and that the team is focused on delivering the highest-priority items each sprint.\nThe Bottom Line: Keep Future Sprints Clear for Greater Agility # Ultimately, filling future sprints is a habit that can create unnecessary pressure, reduce quality, and limit flexibility. By keeping the backlog as the single source of prioritized work, agile teams can:\nRespond more effectively to change. Protect code quality by avoiding rushed development. Prioritize work based on current needs, not pre-set plans. Keeping future sprints empty encourages a more adaptive, value-driven approach to development. When each sprint begins, the team is prepared to take on the work that matters most, and stakeholders can rest assured that their needs are met through continuous re-prioritization. Agile is all about staying flexible, so let the backlog do its job, and keep future sprints open.\n"}]